<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/465dd91009.js" crossorigin="anonymous"></script>
    <script src="../buffer.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@500&family=Cormorant+Garamond:wght@500&display=swap" rel="stylesheet">
    <title>RecruitOn - Results</title>
    <style>

        body,
        html {
            padding: 0;
            margin: 0;
            background: #e6e6e6;
            font-family: 'Barlow Condensed', sans-serif;
        }

        div.dv-lvl-0.recruit-on-header {
            max-width: 1920px;
            width: 100%;
            height: 100px;
            background: #252fc2;
            margin: 0 auto;
            display: flex;
            align-items: center;
            box-shadow: 0px 0px 10px 0px #000;
            z-index: 2;
        }

        div.dv-lvl-0.recruiter-on-body {
            padding: .1px;
            box-shadow: 0px 0px 5px -1px #000;
            max-width: 1920px;
            width: 100%;
            margin: 0 auto;
        }

        div.dv-lvl-1.page-title {
            margin: 40px 5%;
            width: 27%;
            background: #252fc2;
            color: #e6e6e6;
            box-shadow: 0px 2px 10px -6px #000;
        }

        h1.he-lvl-2.page-title-header {
            padding: 20px;
        }

        div.dv-lvl-1.filters-text-container {
            margin: 10px 5%;
            width: 27%;
        }

        p.par-lvl-2.filters-text {
            padding: 10px;
            font-size: 1.3em;
        }

        div.dv-lvl-1.recruit-on-logo {
            margin-left: 30px;
            color: #e6e6e6;
        }

        img.img-lvl-2.recruit-on-img {
            height: 100px;
        }

        p.par-lvl-2.logo-paragraph {
            padding: 0;
            margin: 0;
            padding-bottom: .2em;
            letter-spacing: .4em;
        }

        div.dv-lvl-1.recruiter-result-header {
            width: 80%;
            background: #fff;
            margin: 40px auto;
            box-shadow: 0px 0px 10px -5px #000;
            display: flex;
            flex-flow: column wrap;
            align-items: center;
            justify-content: center;
        }

        div.dv-lvl-2.recruiter-result-button-wrapper {
            width: 60%;
            display: flex;
            align-items: center;
            justify-content: space-around;
            margin: 20px;
        }

        div.dv-lvl-2.recruiter-result-status-wrapper {
            width: 60%;
            display: flex;
            align-items: center;
            justify-content: space-around;
            margin: 20px;
            margin-top: 0;
            color: #60d233;
            display: none;
        }

        div.enabled-by-city,
        div.enabled-by-salary,
        div.enabled-by-qualification {
            opacity: 0;
        }

        button.by-city {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 14px;
        }

        button.by-city:hover {
            background: #c18282;
        }

        button.by-city:active {
            outline: none;
            border: none;
            outline-offset: none;
            background: #8c1a1a;
            box-shadow: 0px 0px 4px 3px #632e2e;
        }

        button.by-city:focus {
            border: none;
            outline: none;
            outline-offset: none;
            background: #8c1a1a;
        }

        button.by-salary {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 14px;
        }

        button.by-salary:hover {
            background: #c18282;
        }

        button.by-salary:active {
            outline: none;
            border: none;
            outline-offset: none;
            background: #8c1a1a;
            box-shadow: 0px 0px 4px 3px #632e2e;
        }

        button.by-salary:focus {
            border: none;
            outline: none;
            outline-offset: none;
            background: #8c1a1a;
        }

        button.by-qualification {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 14px;
        }

        button.by-qualification:hover {
            background: #c18282;

        }

        button.by-qualification:active {
            outline: none;
            border: none;
            outline-offset: none;
            background: #8c1a1a;
            box-shadow: 0px 0px 4px 3px #632e2e;
        }

        button.by-qualification:focus {
            border: none;
            outline: none;
            outline-offset: none;
            background: #8c1a1a;
        }

        div.dv-lvl-1.recruiter-result-banner {
            height: 50px;
            width: 90%;
            max-width: 1920px;
            background: #fff;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            align-items: center;
            margin: 0 auto;
        }

        div.dv-lvl-1.recruiter-result-banner p {
            margin-left: 30px;
        }

        div.dv-lvl-1.recruiter-result-items-container {
            max-width: 1920px;
            width: 100%;
            margin: 0 auto 40px auto;
        }

        h2.he-lvl-2.recruiter-city-item-header {
            max-width: 1920px;
            background: #fff;
            box-shadow: 0px 2px 10px -6px #000;
            padding: 20px;
            text-transform: uppercase;
            font-size: 1.1em;
            letter-spacing: .5em;
            margin: 40px 5%;
            width: 27%;
            background: #252fc2;
            color: #e6e6e6;
        }

        div.dv-lvl-2.recruiter-result-item {
            width: 90%;
            margin: 40px auto;
            background: #fff;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
        }

        div.dv-lvl-2.show-in-map {
            width: 29%;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            margin-left: 5%;
            align-items: center;
            justify-content: center;
            height: 100px;
            background: #dadcff;
        }

        div.dv-lvl-2.map-container {
            width: 90%;
            margin: 40px auto;
            background: #efc8c8;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            height: 600px;
        }

        div.dv-lvl-2.show-in-map:hover {
            background: #c1c4ff;
            cursor: pointer;
        }

        div.dv-lvl-2.show-in-map p {
            font-size: 1.6em;
            margin-right: 10px;
            text-transform: uppercase;
            color: #555eff;
        }

        div.dv-lvl-2.show-in-map i {
            font-size: 2em;
            color: #555eff;
        }

        div.dv-lvl-3.recruiter-result-item-info {
            width: 80%;
        }

        div.dv-lvl-3.recruiter-result-item-qualification {
            width: 20%;
        }

        div.dv-lvl-3.recruiter-result-item-qualification.green {
            background: linear-gradient(90deg, #c2e9b3, #54cf23);
        }

        div.dv-lvl-3.recruiter-result-item-qualification.yellow {
            background: linear-gradient(90deg, #fffbc6, #eae40b);
        }

        div.dv-lvl-3.recruiter-result-item-qualification.red {
            background: linear-gradient(90deg, #da9f8d, #d41010);
        }

        div.dv-lvl-3.recruiter-result-item-qualification {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-flow: column wrap;
        }

        div.dv-lvl-4.recruiter-result-item-info-data-row {
            margin: 20px 20px;
            display: flex;
        }

        p.p-name {
            margin-right: 180px;
        }

        p.p-mail {
            margin-right: 180px;
        }

        p.p-age {
            margin-right: 180px;
        }

        p.p-qualification {
            text-align: center;
        }






    </style>
</head>
<body>

    <div class="main-container">
        <div class="dv-lvl-0 recruit-on-header">
            <div class="dv-lvl-1 recruit-on-logo">
                <img class="img-lvl-2 recruit-on-img" src="../RecruitOn-logo.jpg">
            </div>
        </div>

        <div class="dv-lvl-0 recruiter-on-body">

            <div class="dv-lvl-1 page-title">
                <h1 class="he-lvl-2 page-title-header">RESULTS</h1>
            </div>

            <div class="dv-lvl-1 filters-text-container">
                <p class="par-lvl-2 filters-text">You can apply filters here: </p>
            </div>

            <div class="dv-lvl-1 recruiter-result-header">
                <div class="dv-lvl-2 recruiter-result-button-wrapper">
                    <button class="by-city">By City</button>
                    <button class="by-salary">By Salary</button>
                    <button class="by-qualification">By Qualification</button>
                </div>
                <div class="dv-lvl-2 recruiter-result-status-wrapper">
                    <div class="dv-lvl-3 enabled-by-city">[ ENABLED ]</div>
                    <div class="dv-lvl-3 enabled-by-salary">[ ENABLED ]</div>
                    <div class="dv-lvl-3 enabled-by-qualification">[ ENABLED ]</div>
                </div>
            </div>

            <div class="dv-lvl-1 recruiter-result-banner">
                <p>Showing results: unordered</p>
            </div>

            <div class="dv-lvl-1 recruiter-result-items-container">

                {{#if data }}
                   {{#each data}}

                   <div class="dv-lvl-2 recruiter-result-item">
                        <div class="dv-lvl-3 recruiter-result-item-info">

                            <div class="dv-lvl-4 recruiter-result-item-info-data-row">
                                <p class="p-name"><span class="tag">NAME:</span> {{ this.name }}</p>
                                <p class="p-surname"><span class="tag">SURNAME:</span> {{ this.surname }}</p>
                            </div>

                            <div class="dv-lvl-4 recruiter-result-item-info-data-row">
                                <p class="p-mail"><span class="tag">EMAIL:</span> {{ this.mail }}</p>
                                <p class="p-phone"><span class="tag">PHONE:</span> {{ this.phone }}</p>
                            </div>

                            <div class="dv-lvl-4 recruiter-result-item-info-data-row">
                                <p class="p-age"><span class="tag">AGE:</span> {{ this.age }}</p>
                                <p class="p-salary"><span class="tag">SALARY:</span> {{ this.salary }}</p>
                            </div>

                        </div>
                        
                        <div class="dv-lvl-3 recruiter-result-item-qualification">
                            <p class="qualification">QUALIFICATION</p>
                            <p class="p-qualification">{{ this.qualification }}</p>
                        </div>
                    </div>

                    <div class="dv-lvl-2 show-in-map r-{{ this.id }}">
                        <p>Show in map</p>
                        <i class="fas fa-map"></i>
                    </div>

                    {{/each}}

                {{/if}}



            </div>

        </div>


    </div>

    <script>


        /*

            Usage of lastSavedState in order

            1. Declared
            2. handleFilterClick
            3. showInMapButton
            4. onpopstate
            5. onbeforeunload

            Flow

            Payload to pass through pages

            previousStates -> total states
            lastSavedPage -> { page: 0, totalStates: previousStates.length }



        */

        /*
        const navigation = window.performance.navigation.type;
        let pageReloaded = false;
        let historyOp = '';
        console.log(window.history.state);

        console.log(navigation);
        console.log(window.history.state)
        
        if (navigation === 1 && window.history.state && window.history.state.state !== undefined && window.history.state.state !== null) {

            console.log('Reseting');
            pageReloaded = true;
            let firstPageIndex = !isNaN(window.history.state.state) ? window.history.state.state : 0;
            window.history.go(-(firstPageIndex + 1));
            historyOp = 'none';

        }
        */


/*
        let pageStatus = localStorage.getItem('pageStatus');
        pageStatus = pageStatus ? JSON.parse(pageStatus) : {};
        console.log(localStorage.getItem('pageStatus'));
        console.log(pageStatus);
        if (pageStatus && pageStatus.hasOwnProperty('backState')) {
            console.log('BACK PROPERTY ON LOCAL STORAGE');
            window.history.replaceState({ page: 0, state: 'back' }, window.location.href, window.location.href);
        }    */
        
        let pageReloaded = false;
        let historyOp = '';
        console.log(window.performance.navigation.type);
        if (window.performance.navigation.type === 1) {

            // Values that need to be set when user reloads the page
            pageReloaded = true;
            historyOp = 'none'; 

            let historyOnReload = sessionStorage.getItem('pageStatus');
            sessionStorage.removeItem('pageStatus');

            historyOnReload = JSON.parse(historyOnReload);

            if (historyOnReload) {
                // We don't need this to clear total states and the rest of details (empty, initial, so on)
                let totalStatesOnReload = historyOnReload.totalStates;
                
                if (totalStatesOnReload && Array.isArray(totalStatesOnReload) && totalStatesOnReload.length > 0) {
          
                    // Calculates current states and based on this, pages visited 
                    let pagesVisited = 
                        totalStatesOnReload.filter(currentState => currentState.page > 0).length +    
                                        totalStatesOnReload.filter(currentState => {
                                            let currentHistoryPage = window.history.state && window.history.state.page ? window.history.state.page : 0;
                                            return currentState.page <= currentHistoryPage;
                                        }).map(de => {
                                            return de.state.filter((currentState, index) => {
                                                if (de.page < window.history.state.page) {
                                                    return index <= de.state.length - 1;
                                                } else {
                                                    let currentStateIndex = window.history.state && window.history.state.state && !isNaN(window.history.state.state) ? window.history.state.state : 0;
                                                return index <= currentStateIndex;
                                                }
                                                
                                            }).length;
                                        }).reduce((acc, curr) => acc + curr);

                    // Returns back as much as pages visited, so gets to initial state
                    window.history.go(-(pagesVisited));  
                }
            }

            window.history.replaceState({ page: 0, state: 'back' }, window.location.href, window.location.href);
            sessionStorage.clear();

            
/*
            if (historyOnReload && historyOnReload.clearHistory) {
                console.log('Cleared');
                window.history.replaceState({ page: 0, state: 'back' }, window.location.href, window.location.href);
                window.history.pushState(null, window.location.href, window.location.href);
            }
            
                let pagesVisited = 
                    totalStatesOnReload.filter(currentState => currentState.page > 0).length +    
                    totalStatesOnReload.map(currentState => currentState.state.length)
                                       .reduce((acc, curr) => acc + curr);

                console.log(pagesVisited);
                localStorage.setItem('bueno', 1);
                window.history.go(-(pagesVisited));     */
            

            // To calculate how many pages you have to go back in history
            // 1 per each push on filters page
            // 1 per each map shown in which the user has pushed go back

            // Map pages can be calculated base on the keys on totalStates. From 1, each key is 1 page user has seen
        }


        

        //let state = localStorage.getItem('pageStatus');
        //const navigation = window.performance.navigation.type;
        //console.log('Navigation access method');
        //console.log(window.performance.navigation.type);
     //   console.log('Page status');
     //   console.log(state);

        /*
        if (!state || navigation === 1) {
            let pageStateLimit = window.history.state ? window.history.state.page: null;
            console.log('State on nav 1');
            console.log(state);

            if (pageStateLimit) {

                if (state && JSON.parse(state).hasOwnProperty('previousStates')) {
                    state = JSON.parse(state);
                    if (state.hasOwnProperty('adjustHistoryLength')) {
                        console.log('Setting less length for history length');
                        pageStateLimit -= 2;
                    }
                } 

                console.log(pageStateLimit);
                console.log('Clearing browser history');
                window.history.go(-(pageStateLimit));
               

            }

        }
        */

        // Functions declarations

        // Get filter current status
        const getEnabledFilters = () => {   
            return {
                city: byCitySelected,
                salary: bySalarySelected,
                qualification: byQualificationSelected
            };
        }

        // Controls dynamic changes on status panel
        const handleStatusIndicatorsStatus = () => {

            if (byCitySelected || bySalarySelected || byQualificationSelected) {
                statusIndicatorsContainer.style.display = 'flex';
                buttonAndStatusContainer.style.marginBottom = '5px';
            } else {
                statusIndicatorsContainer.style.display = 'none';
                buttonAndStatusContainer.style.marginBottom = '20px';
            }

            if (byCitySelected) enabledCity.style.opacity = '1'; else enabledCity.style.opacity = '0';
            if (bySalarySelected) enabledSalary.style.opacity = '1'; else enabledSalary.style.opacity = '0';
            if (byQualificationSelected) enabledQualification.style.opacity = '1'; else enabledQualification.style.opacity = '0';
            
        }

        // Executes filtering request
        const triggerFilterRequest = () => {

            let xmlHttpRequest;

            if (window.XMLHttpRequest) {
                xmlHttpRequest = new XMLHttpRequest();
            } else if (window.ActiveXObject) {
                xmlHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
            }

            let filters;
            xmlHttpRequest.onreadystatechange = () => {
                filters = {
                    'city' : byCitySelected,
                    'salary': bySalarySelected,
                    'qualification': byQualificationSelected
                };
            };

            xmlHttpRequest.open('POST', '/file-manager/render', true);

            if (xmlHttpRequest.readyState > 0) {
                xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
            }

            xmlHttpRequest.send(JSON.stringify(filters));

            xmlHttpRequest.onload = () => {
                if (xmlHttpRequest.readyState === 4 && xmlHttpRequest.status === 201) {
                    const response = JSON.parse(xmlHttpRequest.responseText);

                    // Global variables for html generation
                    let container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];;
                    let lastCity;
                    let infoModelItemNode = document.querySelectorAll('div.dv-lvl-2.recruiter-result-item')[0];
                    let modeAndQuantityIndicator = document.querySelectorAll('div.dv-lvl-1.recruiter-result-banner p')[0];
                    let quantity = document.querySelectorAll('div.dv-lvl-2.recruiter-result-item').length;

                    // Switch for selecting the filtering mode
                    
                    // 1. city
                    // 2. city/salary
                    // 3. city/qualification
                    // 4. salary
                    // 5. qualification
                    // 6. initial
                    switch (response.mode) {
                        case 'city':

                            clearContainerAndSetStatusIndicator(container, modeAndQuantityIndicator, quantity, response.mode);
                            lastCity = 'none';

                            for (const candidate of response.object) {
                                if (candidate.city !== lastCity) {
                                    container.innerHTML += "<h2 class=\"he-lvl-2 recruiter-city-item-header\">" + candidate.city + "</h2>";
                                }

                                const newInfoItem = setNewCandidateBox(container, infoModelItemNode, candidate);
                                const showMapNode = setNewShowMapButton(showInMapButtons, candidate);

                                container.appendChild(newInfoItem);
                                container.appendChild(showMapNode);

                                lastCity = candidate.city;
                            }
                            break;
                        case 'city/salary':

                            clearContainerAndSetStatusIndicator(container, modeAndQuantityIndicator, quantity, response.mode);

                            for (const cityCandidates of response.object) {

                                let currentCity = Object.keys(cityCandidates).toString();
                                container.innerHTML += "<h2 class=\"he-lvl-2 recruiter-city-item-header\">" + currentCity + "</h2>";

                                for (const cityCandidate of cityCandidates[currentCity]) {
                                    const newInfoItem = setNewCandidateBox(container, infoModelItemNode, cityCandidate);
                                    const showMapNode = setNewShowMapButton(showInMapButtons, cityCandidate);

                                    container.appendChild(newInfoItem);
                                    container.appendChild(showMapNode);
                                }

                            }
                            break;
                        case 'city/qualification':

                            clearContainerAndSetStatusIndicator(container, modeAndQuantityIndicator, quantity, response.mode);

                            for (const cityCandidates of response.object) {

                                let currentCity = Object.keys(cityCandidates).toString();
                                container.innerHTML += "<h2 class=\"he-lvl-2 recruiter-city-item-header\">" + currentCity + "</h2>";

                                for (const cityCandidate of cityCandidates[currentCity]) {
                                    const newInfoItem = setNewCandidateBox(container, infoModelItemNode, cityCandidate);
                                    const showMapNode = setNewShowMapButton(showInMapButtons, cityCandidate);

                                    container.appendChild(newInfoItem);
                                    container.appendChild(showMapNode);
                                }
                            }
                            break;
                        case 'salary':
                        case 'qualification':
                        case 'initial':

                            clearContainerAndSetStatusIndicator(container, modeAndQuantityIndicator, quantity, response.mode);

                            for (const candidate of response.object) {
                                const newInfoItem = setNewCandidateBox(container, infoModelItemNode, candidate);
                                const showMapNode = setNewShowMapButton(showInMapButtons, candidate);

                                container.appendChild(newInfoItem);
                                container.appendChild(showMapNode);
                            }

                            break;

                        default:
                            console.log('No filters selected');  
                            break;
                    }
                    showInMapButtons = document.querySelectorAll('div.dv-lvl-2.show-in-map');
                    setOnShowMapClickEvents();

                }
            }

        };

        // Handles actions on clicks
        const handleFilterClick = (e) => {

            // lastSavedState > 0 means filter has been clicked before and user is navigating through history
            // lastSavedState === 0 is initial state when page loads for the first time
            // lastSavedState === -1 means user has navigated to root history level (window.history.state === null), which means it will replace state on page 1
            /*
            if (lastSavedState > 0 && lastSavedState < previousStates.length - 1 || lastSavedState === -1 && previousStates.length > 1) {
                console.log('Replacing state on click');

                if (lastSavedState === -1) {
                    console.log('Last saved state was: 0. Saving next');
                } else {
                    console.log('Last saved state was: ' + lastSavedState + '. Saving next');
                }

                // Workaround to force normal behavior
                window.history.go(1);
                historyOp = 'replace';
            } else {
                console.log('Pushing new state on click');
                window.history.pushState({ page: previousStates.length }, 'results-interaction-' + previousStates.length, '/file-manager/generate');
                historyOp = 'regular';
            }
            

            if (indexLimitWhenHistoryLoaded > 0) {
                clickedWithHistoryLoaded = true; 
            }

            const initialStatesKeys = initialStates.states.map((state, index) => index);
            console.log(initialStatesKeys);
            console.log(initialStatesKeys.includes(window.history.state && window.history.state.page ? window.history.state.page : 1000));
            if (window.history.state && window.history.state.page && initialStatesKeys.includes(window.history.state.page)) {
                console.log('Hey, this state is part of the initial ones. We do not apply the index limit here');
            }

            indexForHistory = window.history.state && window.history.state.page !== null ? window.history.state.page : -1;
            console.log('Index: ' + indexForHistory);
            console.log('Previous states length: ' + previousStates.length);
            console.log(previousStates.length - indexForHistory);

            if (clickedWithHistoryLoaded && !window.history.state) {
                indexForHistory = indexLimitWhenHistoryLoaded;
            }   

            */

            // Problem: when going back, this difference between previousStates.length and index exists and tries to replace
            // That's why above we set indexForHistory to array.length and this causes another problem: when going back, it pushes instead of replacing

            // We can store an initial states array with the ones set on the first page and apart from this, the total, which would be previous states
            // If history contains a state that is one of the indexes on the initial array, we don't apply the indexLimit. Otherwise, we do it.
            // But there is a problem here: if we set when showing a map, then is set everytime the show map button is clicked, thus updating. We don't want that

            // An idea to fix this:
            // Set a global variable which sets { states: previousStates, update: true } or the same object coming from localStorage, with update set to false,
            // so it is not updated again. This property can be named initialStates. This way, first page saves the initial states, otherwise it doesn't.

            // So pageStatus object would be like:
            /*
                pageStates = {
                    previousStates: previousStates,
                    initialStates: {
                        states: previousStates,
                        update: false
                    }
                }

            */


            // Remove items from total states if higher than current index (history updated)
            totalStates = totalStates.filter((currentState, index) => index <= page);

            let stateBeforeClick = window.history.state.state;
            state = window.history.state && window.history.state.state !== undefined && window.history.state.state !== null && window.history.state.state !== 'initial' && !isNaN(window.history.state.state) ? window.history.state.state + 1 : 0;
            state = currentPageStates.state.length === 0 && totalStates[page] && Array.isArray(totalStates[page].state) && totalStates[page].state.length > 0 
                ? 1
                : state;
            let statesForPage = totalStates.find(currentState => currentState.page === window.history.state.page);
            if ((statesForPage && statesForPage.state && Array.isArray(statesForPage.state) && statesForPage.state.length - stateBeforeClick) > 1) {
                // Replacing
                console.log('Replacing existing state')
                state++;
                window.history.forward();
                
                // Rest of the code need to be done on onpopstate event: page state is not updated yet, so value is not correct
                historyOp = 'replace';
            } else {
                // Pushing
                console.log('Pushing new state on click');
                window.history.pushState({ page: page, state: state }, window.location.href, window.location.href);
                historyOp = 'regular';
            }
            
            firstLoading = false;

            const buttonKeys = ['city', 'salary', 'qualification'];

            buttonKeys.forEach(currentKey => {
                if (e.target.className.indexOf('city') > -1) {
                    byCitySelected = !byCitySelected;
                }

                if (e.target.className.indexOf('salary') > -1) {
                    bySalarySelected = !bySalarySelected;
                    byQualificationSelected = false;
                }

                if (e.target.className.indexOf('qualification') > -1) {
                    byQualificationSelected = !byQualificationSelected;
                    bySalarySelected = false;
                }
            });

            // Compute current state storage after applying new values for filters
            // If lastSavedState is 0 (user has not navigated yet) or lastSavedState reaches the last record, new record is pushed

            /*
            if (lastSavedState === 0 || (lastSavedState > 0 && lastSavedState === previousStates.length - 1)) {
                console.log('Saving current filters');
                previousStates.push(getEnabledFilters());
                // lastSavedState !== 0 (only gets changed when navigating back in history)
                if (lastSavedState !== 0) {
                    lastSavedState++;
                }
            } else {

                // Reset when reaching base level
                if (lastSavedState === -1) {
                    lastSavedState = 0;
                }

                // lastSavedState always get higher here, as it is clicking and advancing on states
                lastSavedState++;
                console.log('Replacing value of previousStates array on index ' + lastSavedState);
                previousStates[lastSavedState] = getEnabledFilters();
                console.log('New values for this index are:');
                console.log(previousStates[lastSavedState]);
            }
            */

            switch (historyOp) {
                case 'regular': 
                    //previousStates.push(getEnabledFilters());
                    currentPageStates.page = page;

                    if (currentPageStates.state.length === 0 && totalStates[page] && Array.isArray(totalStates[page].state) && totalStates[page].state.length > 0) {
                        currentPageStates.state = totalStates[page].state.concat([getEnabledFilters()]);
                    } else {
                        currentPageStates.state.push(getEnabledFilters());
                    }
                   
                    totalStates[page] = currentPageStates;
                    break;
                case 'replace': 
                    statesForPage.state[state - 1] = getEnabledFilters();
                    break;
            }
            
            handleStatusIndicatorsStatus();
            triggerFilterRequest();
        };

        // Controls qualification panel color changes
        const handleQualificationColor = (qualification, element) => {
            if (parseInt(qualification) >= 8) {
                if (element.classList.value.match(/\s?(green|red|yellow){1,}/g,)) {
                    const textToReplace = element.classList.value.match(/\s?(green|red|yellow){1,}/g,).toString();
                    element.classList.remove(textToReplace.trim());
                }
                element.classList.add('green');
            } else if (parseInt(qualification) >= 5 && parseInt(qualification) < 8) {
                if (element.classList.value.match(/\s?(green|red|yellow){1,}/g,)) {
                    const textToReplace = element.classList.value.match(/\s?(green|red|yellow){1,}/g,).toString();
                    element.classList.remove(textToReplace.trim());
                }
                element.classList.add('yellow');
            } else {
                if (element.classList.value.match(/\s?(green|red|yellow){1,}/g,)) {
                    const textToReplace = element.classList.value.match(/\s?(green|red|yellow){1,}/g,).toString();
                    element.classList.remove(textToReplace.trim());
                }
                element.classList.add('red');
            }
        }

        // Set the actions to be triggered on clicks events
        const setOnShowMapClickEvents = () => {

            showInMapButtons.forEach(showInMapButton => {
                showInMapButton.onclick = (e) => {

                    let clickedButtonClassName = e.path.find(element => element.className.startsWith('dv-lvl-2 show-in-map')).className;
                    let userId = parseInt(clickedButtonClassName.split('r-')[1]);

                    // Handle here also state if it needs to be replaced/added (lastSavedState < previousStates.length - 1 or not)

/*
                    if (initialStates.update) {
                        initialStates.states = previousStates;
                        initialStates.update = false;
                    }
                    */

                    let totalStatesLength = 0;
                    totalStates.forEach(currentState => totalStatesLength += currentState.state ? currentState.state.length : 0);

                    console.log('Checking total length for states at page is correct: ' + totalStatesLength);
                    sessionStorage.setItem('pageStatus', JSON.stringify({
                        totalStates: totalStates,
                        lastSavedPage: { page: page, totalStates: totalStatesLength }
                        //initialStates: initialStates
                        //lastSavedState: lastSavedState > 0 ? lastSavedState : previousStates.length - 1
                    }));

                    window.location = '/file-manager/map/' + userId;

                };
            });
        }

        // Clears full container and set status indicator on each filtering
        const clearContainerAndSetStatusIndicator = (container, indicator, quantity, responseMode) => {
            
            if (responseMode.indexOf('/') > -1) {
                responseMode = responseMode.replace('/', ' and ');
            }

            container.innerHTML = '';

            if (responseMode !== 'initial') {
                indicator.innerText = 'Showing results: ' + quantity + '. Ordered by ' + responseMode;
            } else {
                indicator.innerText = 'Showing results: unordered';
            }
            
        }

        // Sets the content for each candidate info panel when filtering
        const setNewCandidateBox = (container, infoModelItemNode, candidate) => {
            let newInfoItem = document.createElement("div")
            newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + candidate.id;
            newInfoItem.innerHTML = infoModelItemNode.innerHTML;
            let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
            let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
            let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
            let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
            let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
            let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
            let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
            
            const cityClassNameRegExpString = newInfoItem.className.match(/([\s]?city-filtered-[0-9]){1,}/g).toString();
            newInfoItem.className = newInfoItem.className.replaceAll(new RegExp(cityClassNameRegExpString, 'g'), '');

            nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + candidate.name;
            surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + candidate.surname;
            emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + candidate.mail;
            phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + candidate.phone;
            ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + candidate.age;
            salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + candidate.salary;
            qualificationNode.innerText = candidate.qualification;

            handleQualificationColor(candidate.qualification, qualificationNode.parentElement);

            return newInfoItem;
        }

        // Sets the button to current candidate map when filtering
        const setNewShowMapButton = (showInMapButtons, candidate) => {
            let showMapIndex = 0;
            showInMapButtons.forEach(
                (currentShowMapNode, index) => {
                    if (candidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                        showMapIndex = index;
                    }
                });
            let showMapNode = showInMapButtons[showMapIndex];
            return showMapNode;
        }

        // Ads 10 length aleatory hash to base64 encoded cookie
        const addAleatoryHash = () => {
            let hash = '';

            const options = {
                numbers : {
                    min: 48,
                    max: 58
                },
                upper: {
                    min: 65,
                    max: 91
                },
                lower: {
                    min: 97,
                    max: 123
                }
            };


            for (let i = 0; i < 10; i++) {
                const chars = ['numbers', 'upper', 'lower'];
                let index = Math.floor(Math.random() * 3);
                let max = options[chars[index]].max; 
                let min = options[chars[index]].min;
                let asciiCode = Math.floor(Math.random() * (max - min) + min);
                let nextChar = String.fromCharCode(asciiCode);
                hash += nextChar;
            }
            return hash;
        }

        // Sets the cookie to authorize request
        const setSecurityCookie = () => {

            let payload = 'encodedhere' + addAleatoryHash();
            var currentTime = new Date();
            let newDate = currentTime.setSeconds(currentTime.getSeconds() + 2);
            let newDateObject = new Date(newDate);
            document.cookie = '_p=' + payload + ';' + 'expires=' + newDateObject.toGMTString();
        }

        // Set the previous states when going back on history   
        const setPreviousStates = () => {
            
            if (totalStates && totalStates.length > 0) {

                /*
                if (previousStates[previousStates.length - 1].hasOwnProperty('userId')) {
                    let lastFilteredState = previousStates[previousStates.length - 2];
                    byCitySelected = lastFilteredState.city;
                    bySalarySelected = lastFilteredState.salary;
                    byQualificationSelected = lastFilteredState.qualification;
                    handleStatusIndicatorsStatus();
                } else {
                    let lastFilteredState = previousStates[previousStates.length - 1];
                    byCitySelected = lastFilteredState.city;
                    bySalarySelected = lastFilteredState.salary;
                    byQualificationSelected = lastFilteredState.qualification;
                    //previousStates = previousStates.slice(0, previousStates.length - 1);
                    handleStatusIndicatorsStatus();
                }
                */

                //let lastFilteredState = previousStates[previousStates.length - 1];
                
                let pagePosition = window.history.state.page;
                let lastPageStates;
                
                while (pagePosition >= 0 && !lastPageStates) {
                    if (!lastPageStates) {
                        lastPageStates = totalStates.find(currentState => currentState.page === pagePosition);
                    }
                    pagePosition--;
                }

                let lastFilteredState = state === 'initial' ? lastPageStates.state[0] : lastPageStates.state[lastPageStates.state.length - 1];
                byCitySelected = lastFilteredState.city;
                bySalarySelected = lastFilteredState.salary;
                byQualificationSelected = lastFilteredState.qualification;
                handleStatusIndicatorsStatus();

            } else {
                handleStatusIndicatorsStatus();
            }
            
        }

        // Set the color for qualifications on first load
        const setQualificationPanelsColors = () => {
            if (firstLoading) {
                const currentItems = document.querySelectorAll('div.dv-lvl-2.recruiter-result-item');
                for (const candidate of currentItems) {
                    const qualificationBackgroundNode = candidate.querySelectorAll('div.dv-lvl-3.recruiter-result-item-qualification')[0];
                    const qualification = candidate.querySelectorAll('p.p-qualification')[0].innerText;
                    handleQualificationColor(qualification, qualificationBackgroundNode);
                }
            } 
        }

        // Bind actions to be triggered on filters clicks
        const bindActionsToEvents = () => { 
            if (byCityButton && bySalaryButton && byQualificationButton) {
                byCityButton.onclick = (e) => handleFilterClick(e);
                bySalaryButton.onclick = (e) => handleFilterClick(e);
                byQualificationButton.onclick = (e) => handleFilterClick(e);
            } else {
                throw new Error('Error with buttons. Check structure');
            }
        }

        // Inits whole process
        const init = () => {
            bindActionsToEvents();
            setPreviousStates();
            setQualificationPanelsColors();
            setOnShowMapClickEvents();
        }

        // Script and global variables declaration

        // Clean security cookie
        document.cookie = "_p= ; expires = Thu, 01 Jan 1970 00:00:00 GMT";

        // Global variables
        //let requestedStateIndex = 0;
        //let lastSavedState = 0;

        let currentPageStates = { page: 0, state: [] };
        let totalStates = [];
        //let initialStates = { states: [], update: true };
        let historyFiltered = false;
        let firstLoading = true;
        //let indexLimitWhenHistoryLoaded = 0;
        //let clickedWithHistoryLoaded = false;
        let indexForHistory;
        let page = 0;
        let state = window.history.state && window.history.state.state === 'back' ? 'back' : 'initial';

        let windowPrecedence = false;

        let byCitySelected = false;
        let bySalarySelected = false;
        let byQualificationSelected = false;

        let history = sessionStorage.getItem('pageStatus');
        sessionStorage.removeItem('pageStatus');

        // History management
        if (history !== null && history !== undefined) {
            //if (pageReloaded) window.history.pushState({ page: 0, state: 'initial' }, window.location.href, window.location.href);
            history = JSON.parse(history);
            totalStates = !pageReloaded ? history.totalStates : [];
            currentPageStates = !pageReloaded ? currentPageStates : { page: 0, state: [] }
            windowPrecedence = !pageReloaded ? history.windowPrecedence : false;
            page = !pageReloaded ? (window.history.state && window.history.state.page && windowPrecedence ? window.history.state.page : history.lastSavedPage.page) : 0;
            console.log('STATE BEFORE: ' + state);
            state = window.history.state && window.history.state.state ? window.history.state.state : 'initial';
            console.log('STATE AFTER: ' + state);
            
            let index = 1;
            //initialStates = !pageReloaded ? history.initialStates : initialStates;
            //indexLimitWhenHistoryLoaded = previousStates.length;
            //lastSavedState = history && history.hasOwnProperty('lastSavedState') ? history.lastSavedState : 0;
            console.log(history);

            console.log('Showing previous states: ');

            console.log(totalStates);

            /*
            for (const previousState of previousStates) {

                if (previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) {
                    console.log('Populating history with filters');
                    window.history.replaceState({ page: page, state: index }, 'results-interaction-' + index, '/file-manager/generate');
                    index++;
                } else {
                    console.log('Populating history with user id for map');
                    window.history.replaceState({ page: page, state: index }, 'maps-interaction-' + index, '/file-manager/map/' + previousState.userId);
                    index++;
                }
        
            }

            console.log('Last object on history to restore url');   
            window.history.replaceState({ page: index }, null, '/file-manager/generate'); 

            */

            if (windowPrecedence && window.history.state.page !== history.lastSavedPage.page && !isNaN(window.history.state.page)) {
                // Here we should replace with previous saved state
                console.log('Replacing history page with previous set value: ' + window.history.state.page);
                window.history.replaceState({ page: window.history.state.page, state: state }, window.location.href, window.location.href);
            } else {
                // Here we should push a new state
                console.log('Here we should push a new state');
                console.log('Checking history before pushing new initial object: ' + window.history.state);
                window.history.replaceState({ page: page, state: state }, window.location.href, window.location.href);
            }

            if (page > 0 && state === 'initial') {
                let pagePosition = window.history.state.page;
                let lastPageStates;
                
                while (pagePosition >= 0 && !lastPageStates) {
                    if (!lastPageStates) {
                        lastPageStates = totalStates.find(currentState => currentState.page === pagePosition);
                    }
                    pagePosition--;
                }

                if (totalStates.find(currentState => currentState.page === page) === undefined) {
                    if (lastPageStates) {
                        let initialStateForNewPage = lastPageStates.state[lastPageStates.state.length - 1];
                        totalStates.push({ page: page, state: [initialStateForNewPage] });       
                    } else {
                        console.log('No filters have been pushed to history');
                    }
                }
                
            }
            
        } else {
            window.history.replaceState({ page: page, state: state }, window.location.href, window.location.href);
        }

        if (window.history.state.state === 'back') {
            console.log('Clearing history. Resetting initial state');
            window.history.pushState({ page: 0, state: 'initial' }, window.location.href, window.location.href);
        }

        // Original buttons for filters
        const byCityButton = document.querySelectorAll('button.by-city')[0];
        const bySalaryButton = document.querySelectorAll('button.by-salary')[0];
        const byQualificationButton = document.querySelectorAll('button.by-qualification')[0];

        // Show map buttons
        let showInMapButtons = document.querySelectorAll('div.dv-lvl-2.show-in-map');

        // Necessary elements for handleStatusIndicatorsStatus function
        const buttonAndStatusContainer = document.querySelectorAll('div.dv-lvl-2.recruiter-result-button-wrapper')[0];
        const statusIndicatorsContainer = document.querySelectorAll('div.dv-lvl-2.recruiter-result-status-wrapper')[0];

        const enabledCity = document.querySelectorAll('div.enabled-by-city')[0];
        const enabledSalary = document.querySelectorAll('div.enabled-by-salary')[0];
        const enabledQualification = document.querySelectorAll('div.enabled-by-qualification')[0];

        // Executes initiation
        init();

        // Onpopstate to be triggered when history changes
        window.onpopstate = (e) => {

            if (window.history.state.state === 'back') {
                window.history.back();
            }

            console.log('Executing onpopstate');

            let previousState;
            historyOp = historyOp === '' ? 'regular' : historyOp;

            page = window.history.state && window.history.state.page ? window.history.state.page : 0
            state = window.history.state && window.history.state.state !== null && window.history.state !== undefined ? window.history.state.state : 'initial';

            //console.log('Values for page: ' + page);
            //console.log('Values for state: ' + state);


            switch (historyOp) {
                case 'replace':
                    window.history.replaceState({ page: page, state: state }, window.location.href, window.location.href);
                    historyOp = 'regular';
                    break;
                case 'regular':

                    if (window.history.state && window.history.state.state !== undefined && window.history.state.state !== null) {
                        console.log('From array');
                        let pagePosition = window.history.state.page;
                        let lastPageStates;
                        
                        while (pagePosition >= 0 && !lastPageStates) {
                            if (!lastPageStates) {
                                lastPageStates = totalStates.find(currentState => currentState.page === pagePosition);
                            }
                            pagePosition--;
                        }

                        let index = !isNaN(window.history.state.state) ? window.history.state.state : 0;

                        if (page === 0 && state === 'initial') {
                            console.log('Setting initial state');
                            previousState = {
                                city: false,
                                salary: false,
                                qualification: false
                            }
                        } else {
                            previousState = lastPageStates.state[index];
                        }
                        
                    } 
                        //console.log('Initial state');
                        /*
                        if (clickedWithHistoryLoaded && window.history.state && window.history.state.page) {
                            index = window.history.state.page >= indexLimitWhenHistoryLoaded ? window.history.state.page : 0;
                            previousState = previousStates[index];
                        } else if (clickedWithHistoryLoaded && !window.history.state) {
                            index = indexLimitWhenHistoryLoaded - 1;
                            previousState = previousStates[index];
                        } else {
                            console.log('From crafted object');
                            previousState = {
                                city: false,
                                salary: false,
                                qualification: false
                            }
                        }
                        */

                        
                    
                    break;
                default: 
                    break;
            }
            
            console.log(previousState);
            if (previousState !== undefined) {
                if (previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) { 
                    byCitySelected = previousState.city ? true : false;
                    bySalarySelected = previousState.salary ? true : false;
                    byQualificationSelected = previousState.qualification ? true : false;

                    handleStatusIndicatorsStatus();    
                    triggerFilterRequest();
                } else {
                    /*
                    let totalStatesLength = 0;
                    totalStates.forEach(currentState => totalStatesLength += currentState.state.length);
                    console.log('Checking total length for states at page is correct: ' + totalStatesLength);

                    localStorage.setItem('pageStatus', JSON.stringify({
                        totalStates: totalStates,
                        lastSavedPage: { page: page, totalStates: totalStatesLength }
                        //lastSavedState: lastSavedState
                    }));
                    */
                }
                if (window.history.state && window.history.state.state === 'initial') {
                    let totalStatesLength = 0;
                    totalStates.forEach(currentState => totalStatesLength += currentState.state.length);
                    console.log('Checking total length for states at page is correct: ' + totalStatesLength);

                    sessionStorage.setItem('pageStatus', JSON.stringify({
                    totalStates: totalStates,
                    lastSavedPage: { page: page, totalStates: totalStatesLength },
                    //lastSavedState: lastSavedState
                }));

                }
                
            }

            // Boolean to reproduce behavior onbeforeunload if onpopstate is not triggered
            historyFiltered = true;

            /*

            if (lastSavedState === 0) {
                // lastSavedState received from map page (lastSavedState transfer needs to be checked and unified)
                lastSavedState = previousStates.length - 1; // Page status is one less than array length
            } else if (lastSavedState === -1 && window.history.state && window.history.state.page === 1) {
                // Reset here also if history object reached base level (null)
                lastSavedState = 0;
            }

            let previousState;

            if (window.history.state) {

                switch (historyOp) {
                    case 'replace':
                        console.log('Current window page: ' + window.history.state.page);
                        console.log('Last saved state: ' + lastSavedState);

                        console.log('Replacing state number ' + lastSavedState + ' on history object');
                        window.history.replaceState({ page: lastSavedState }, 'results-interaction-' + lastSavedState, '/file-manager/generate');

                        historyOp = 'regular';
                    break;
                    case 'regular':

                        // If current state is greater than previous one, navigation is forward
                        if (window.history.state.page > lastSavedState) {
                            console.log('Forward navigation');

                            requestedStateIndex = lastSavedState + 1;
                            console.log('Requesting state on index: ' + requestedStateIndex);
                            lastSavedState++;
                        // If current state is minor than previous one, navigation is back
                        } else {
                            console.log('Back navigation');
                            console.log('Last saved state: ' + lastSavedState);
                            requestedStateIndex = lastSavedState - 1;
                            console.log('Requesting state on index: ' + requestedStateIndex);
                            lastSavedState--;
                        }

                        previousState = previousStates[requestedStateIndex];
                        console.log('Page status: ' + requestedStateIndex);
                        console.log('Values for state:');
                        console.log(previousState);

                    break;
                }

                


            } else {
                
                if (lastSavedState === 1) {
                    lastSavedState = -1;
                    requestedStateIndex = 0;
                    previousState = previousStates[requestedStateIndex];
                    console.log('Page status: ' + requestedStateIndex);
                    console.log('Values for state:');
                    console.log(previousState);
                }
            }

            */

        }
        
        // Onbeforeunload    to be triggered when unloading every page
        window.onbeforeunload = (e) => {
          
            /*
            console.log(lastSavedState);
            console.log(window.history.state);
            console.log('Returning false');
            return false;*/
/*
            console.log('Executing onbeforeunload');
            console.log(e);
            console.log(e.currentTarget.performance.navigation);
            console.log(e.currentTarget.performance.eventCounts.values());
            const d = e.currentTarget.performance.eventCounts.values();
            for (let e of d) {
                console.log('eee' + ': ' + e)
            }
            console.log(e.currentTarget.performance.getEntries());
            return false;*/
            const navigationType = e.currentTarget.performance.navigation.type; 

            if (navigationType !== 1) {

                let pagePosition = window.history.state.page;
                let lastPageStates;
                
                while (pagePosition >= 0 && !lastPageStates) {
                    if (!lastPageStates) {
                        lastPageStates = totalStates.find(currentState => currentState.page === pagePosition);
                    }
                    pagePosition--;
                }
                
                const executeOnBeforeUnload = window.history.state && 
                                              window.history.state.state && 
                                              window.history.state.state === lastPageStates.state.length - 1 ? true : false;

                
                console.log('Keeping history');

                setSecurityCookie();

        
                if (!historyFiltered || executeOnBeforeUnload) {

                    let totalStatesLength = 0;
                    totalStates.forEach(currentState => totalStatesLength += currentState.state ? currentState.state.length : 0);
                    console.log('Checking total length for states at page is correct: ' + totalStatesLength);
                    page = pageReloaded ? 0 : page;

                    sessionStorage.setItem('pageStatus', JSON.stringify({
                        totalStates: totalStates,
                        lastSavedPage: { page: page, totalStates: totalStatesLength }
                        //initialStates: initialStates
                    }));

                    /*
                    let previousState = previousStates[previousStates.length - 1];

                    if (previousState !== undefined) {
                        if (previousState && previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) { 
                            byCitySelected = previousState.city ? true : false;
                            bySalarySelected = previousState.salary ? true : false;
                            byQualificationSelected = previousState.qualification ? true : false;

                            handleStatusIndicatorsStatus();    
                            triggerFilterRequest();
                        } else {
                            localStorage.setItem('pageStatus', JSON.stringify({
                                previousStates: previousStates,

                                //adjustHistoryLength: previousState.hasOwnProperty('adjustHistoryLength') ? true : false,
                                //lastSavedState: lastSavedState > 0 ? lastSavedState : previousStates.length - 1
                            }));
                        }
                    }
                    */

                }

            } 

        };

    
        if (!localStorage.getItem('pageStatus')) {
            // Values that need to be set when user reloads the page
            sessionStorage.setItem('pageStatus', JSON.stringify({
                totalStates: totalStates,
                lastSavedPage: { page: 0, state: 'initial' }
            }));
        }

        window.onunload = () => {
            
        }

        
    </script>
</body>
</html>