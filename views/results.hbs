<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/465dd91009.js" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@500&family=Cormorant+Garamond:wght@500&display=swap" rel="stylesheet">
    <title>RecruitOn - Results</title>
    <style>

        body,
        html {
            padding: 0;
            margin: 0;
            background: #e6e6e6;
            font-family: 'Barlow Condensed', sans-serif;
        }

        div.dv-lvl-0.recruit-on-header {
            max-width: 1920px;
            width: 100%;
            height: 100px;
            background: #252fc2;
            margin: 0 auto;
            display: flex;
            align-items: center;
            box-shadow: 0px 0px 10px 0px #000;
            z-index: 2;
        }

        div.dv-lvl-0.recruiter-on-body {
            padding: .1px;
            box-shadow: 0px 0px 5px -1px #000;
            max-width: 1920px;
            width: 100%;
            margin: 0 auto;
        }

        div.dv-lvl-1.page-title {
            margin: 40px 5%;
            width: 27%;
            background: #252fc2;
            color: #e6e6e6;
            box-shadow: 0px 2px 10px -6px #000;
        }

        h1.he-lvl-2.page-title-header {
            padding: 20px;
        }

        div.dv-lvl-1.filters-text-container {
            margin: 10px 5%;
            width: 27%;
        }

        p.par-lvl-2.filters-text {
            padding: 10px;
            font-size: 1.3em;
        }

        div.dv-lvl-1.recruit-on-logo {
            margin-left: 30px;
            color: #e6e6e6;
        }

        img.img-lvl-2.recruit-on-img {
            height: 100px;
        }

        p.par-lvl-2.logo-paragraph {
            padding: 0;
            margin: 0;
            padding-bottom: .2em;
            letter-spacing: .4em;
        }

        div.dv-lvl-1.recruiter-result-header {
            width: 80%;
            background: #fff;
            margin: 40px auto;
            box-shadow: 0px 0px 10px -5px #000;
            display: flex;
            flex-flow: column wrap;
            align-items: center;
            justify-content: center;
        }

        div.dv-lvl-2.recruiter-result-button-wrapper {
            width: 60%;
            display: flex;
            align-items: center;
            justify-content: space-around;
            margin: 20px;
        }

        div.dv-lvl-2.recruiter-result-status-wrapper {
            width: 60%;
            display: flex;
            align-items: center;
            justify-content: space-around;
            margin: 20px;
            margin-top: 0;
            color: #60d233;
            display: none;
        }

        div.enabled-by-city,
        div.enabled-by-salary,
        div.enabled-by-qualification {
            opacity: 0;
        }

        button.by-city {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 14px;
        }

        button.by-city:hover {
            background: #c18282;
        }

        button.by-city:active {
            outline: none;
            border: none;
            outline-offset: none;
            background: #8c1a1a;
            box-shadow: 0px 0px 4px 3px #632e2e;
        }

        button.by-city:focus {
            border: none;
            outline: none;
            outline-offset: none;
            background: #8c1a1a;
        }

        button.by-salary {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 14px;
        }

        button.by-salary:hover {
            background: #c18282;
        }

        button.by-salary:active {
            outline: none;
            border: none;
            outline-offset: none;
            background: #8c1a1a;
            box-shadow: 0px 0px 4px 3px #632e2e;
        }

        button.by-salary:focus {
            border: none;
            outline: none;
            outline-offset: none;
            background: #8c1a1a;
        }

        button.by-qualification {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 14px;
        }

        button.by-qualification:hover {
            background: #c18282;

        }

        button.by-qualification:active {
            outline: none;
            border: none;
            outline-offset: none;
            background: #8c1a1a;
            box-shadow: 0px 0px 4px 3px #632e2e;
        }

        button.by-qualification:focus {
            border: none;
            outline: none;
            outline-offset: none;
            background: #8c1a1a;
        }

        div.dv-lvl-1.recruiter-result-banner {
            height: 50px;
            width: 90%;
            max-width: 1920px;
            background: #fff;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            align-items: center;
            margin: 0 auto;
        }

        div.dv-lvl-1.recruiter-result-banner p {
            margin-left: 30px;
        }

        div.dv-lvl-1.recruiter-result-items-container {
            max-width: 1920px;
            width: 100%;
            margin: 0 auto 40px auto;
        }

        h2.he-lvl-2.recruiter-city-item-header {
            max-width: 1920px;
            background: #fff;
            box-shadow: 0px 2px 10px -6px #000;
            padding: 20px;
            text-transform: uppercase;
            font-size: 1.1em;
            letter-spacing: .5em;
            margin: 40px 5%;
            width: 27%;
            background: #252fc2;
            color: #e6e6e6;
        }

        div.dv-lvl-2.recruiter-result-item {
            width: 90%;
            margin: 40px auto;
            background: #fff;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
        }

        div.dv-lvl-2.show-in-map {
            width: 29%;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            margin-left: 5%;
            align-items: center;
            justify-content: center;
            height: 100px;
            background: #dadcff;
        }

        div.dv-lvl-2.map-container {
            width: 90%;
            margin: 40px auto;
            background: #efc8c8;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            height: 600px;
        }

        div.dv-lvl-2.show-in-map:hover {
            background: #c1c4ff;
            cursor: pointer;
        }

        div.dv-lvl-2.show-in-map p {
            font-size: 1.6em;
            margin-right: 10px;
            text-transform: uppercase;
            color: #555eff;
        }

        div.dv-lvl-2.show-in-map i {
            font-size: 2em;
            color: #555eff;
        }

        div.dv-lvl-3.recruiter-result-item-info {
            width: 80%;
        }

        div.dv-lvl-3.recruiter-result-item-qualification {
            width: 20%;
        }

        div.dv-lvl-3.recruiter-result-item-qualification.green {
            background: linear-gradient(90deg, #c2e9b3, #54cf23);
        }

        div.dv-lvl-3.recruiter-result-item-qualification.yellow {
            background: linear-gradient(90deg, #fffbc6, #eae40b);
        }

        div.dv-lvl-3.recruiter-result-item-qualification.red {
            background: linear-gradient(90deg, #da9f8d, #d41010);
        }

        div.dv-lvl-3.recruiter-result-item-qualification {
            display: flex;
            align-items: center;
            justify-content: center;
            flex-flow: column wrap;
        }

        div.dv-lvl-4.recruiter-result-item-info-data-row {
            margin: 20px 20px;
            display: flex;
        }

        p.p-name {
            margin-right: 180px;
        }

        p.p-mail {
            margin-right: 180px;
        }

        p.p-age {
            margin-right: 180px;
        }

        p.p-qualification {
            text-align: center;
        }






    </style>
</head>
<body>

    <div class="main-container">
        <div class="dv-lvl-0 recruit-on-header">
            <div class="dv-lvl-1 recruit-on-logo">
                <img class="img-lvl-2 recruit-on-img" src="../RecruitOn-logo.jpg">
            </div>
        </div>

        <div class="dv-lvl-0 recruiter-on-body">

            <div class="dv-lvl-1 page-title">
                <h1 class="he-lvl-2 page-title-header">RESULTS</h1>
            </div>

            <div class="dv-lvl-1 filters-text-container">
                <p class="par-lvl-2 filters-text">You can apply filters here: </p>
            </div>

            <div class="dv-lvl-1 recruiter-result-header">
                <div class="dv-lvl-2 recruiter-result-button-wrapper">
                    <button class="by-city">By City</button>
                    <button class="by-salary">By Salary</button>
                    <button class="by-qualification">By Qualification</button>
                </div>
                <div class="dv-lvl-2 recruiter-result-status-wrapper">
                    <div class="dv-lvl-3 enabled-by-city">[ ENABLED ]</div>
                    <div class="dv-lvl-3 enabled-by-salary">[ ENABLED ]</div>
                    <div class="dv-lvl-3 enabled-by-qualification">[ ENABLED ]</div>
                </div>
            </div>

            <div class="dv-lvl-1 recruiter-result-banner">
                <p>Showing results: unordered</p>
            </div>

            <div class="dv-lvl-1 recruiter-result-items-container">

                {{#if data }}
                   {{#each data}}

                   <div class="dv-lvl-2 recruiter-result-item">
                        <div class="dv-lvl-3 recruiter-result-item-info">

                            <div class="dv-lvl-4 recruiter-result-item-info-data-row">
                                <p class="p-name"><span class="tag">NAME:</span> {{ this.name }}</p>
                                <p class="p-surname"><span class="tag">SURNAME:</span> {{ this.surname }}</p>
                            </div>

                            <div class="dv-lvl-4 recruiter-result-item-info-data-row">
                                <p class="p-mail"><span class="tag">EMAIL:</span> {{ this.mail }}</p>
                                <p class="p-phone"><span class="tag">PHONE:</span> {{ this.phone }}</p>
                            </div>

                            <div class="dv-lvl-4 recruiter-result-item-info-data-row">
                                <p class="p-age"><span class="tag">AGE:</span> {{ this.age }}</p>
                                <p class="p-salary"><span class="tag">SALARY:</span> {{ this.salary }}</p>
                            </div>

                        </div>
                        
                        <div class="dv-lvl-3 recruiter-result-item-qualification">
                            <p class="qualification">QUALIFICATION</p>
                            <p class="p-qualification">{{ this.qualification }}</p>
                        </div>
                    </div>

                    <div class="dv-lvl-2 show-in-map r-{{ this.id }}">
                        <p>Show in map</p>
                        <i class="fas fa-map"></i>
                    </div>

                    {{/each}}

                {{/if}}


                {{!-- {{> partialTemplate website="sitepoint"}} <br> --}}


            </div>

        </div>


    </div>



    <script>

        document.cookie = "_p= ; expires = Thu, 01 Jan 1970 00:00:00 GMT";

        let pageStateOnResults = 1;
        let previousStates = [];
        let historyFiltered = false;
        let firstLoading = true;
        let byCitySelected = false;
        let bySalarySelected = false;
        let byQualificationSelected = false;

        let history = localStorage.getItem('pageStatus');
        localStorage.removeItem('pageStatus');

        if (history !== null && history !== undefined) {

            

            console.log()
            console.log('surprise bitch');
            history = JSON.parse(history);
            previousStates = history.previousStates;
            pageStateOnResults = history.pageStateOnResults;
            let index = 1;

            console.log(previousStates);
            for (const previousState of previousStates) {

                if (previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) {
                    window.history.replaceState({ page: index }, 'results-interaction-' + index, '/file-manager/generate');
                    console.log('Populating history with filters');
                    console.log(index);
                    index++;
                } else {
                    console.log('Populating history with user id for map');
                    window.history.replaceState({ page: index }, 'maps-interaction-' + index, '/file-manager/map/' + previousState.userId);
                    console.log(index);
                    index++;
                }
                
            }

            console.log('Last object on history to restore url');   
            index++;
           // window.history.pushState({ page: index }, 'results-interaction-' + index, '/file-manager/generate');
            window.history.replaceState(null, null, '/file-manager/generate');  
        }
       

        let showInMapButtons = document.querySelectorAll('div.dv-lvl-2.show-in-map');

        const byCityButton = document.querySelectorAll('button.by-city')[0];
        const bySalaryButton = document.querySelectorAll('button.by-salary')[0];
        const byQualificationButton = document.querySelectorAll('button.by-qualification')[0];

        const buttonAndStatusContainer = document.querySelectorAll('div.dv-lvl-2.recruiter-result-button-wrapper')[0];
        const statusIndicatorsContainer = document.querySelectorAll('div.dv-lvl-2.recruiter-result-status-wrapper')[0];
        const enabledCity = document.querySelectorAll('div.enabled-by-city')[0];
        const enabledSalary = document.querySelectorAll('div.enabled-by-salary')[0];
        const enabledQualification = document.querySelectorAll('div.enabled-by-qualification')[0];

        if (byCityButton && bySalaryButton && byQualificationButton) {
            byCityButton.onclick = (e) => handleFilterClick(e);
            bySalaryButton.onclick = (e) => handleFilterClick(e);
            byQualificationButton.onclick = (e) => handleFilterClick(e);
        } else {
            throw new Error('Error with buttons. Check structure');
        }

        const handleFilterClick = (e) => {

            previousStates.push(getEnabledFilters());
            console.log('__CURRENT STATE BEFORE SAVING');
            console.log(previousStates);
            console.log(pageStateOnResults);
            window.history.pushState({ page: pageStateOnResults }, 'results-interaction-' + pageStateOnResults, '/file-manager/generate');
            pageStateOnResults++;

            firstLoading = false;

            const buttonKeys = ['city', 'salary', 'qualification'];

            buttonKeys.forEach(currentKey => {
                if (e.target.className.indexOf('city') > -1) {
                    byCitySelected = !byCitySelected;
                }

                if (e.target.className.indexOf('salary') > -1) {
                    bySalarySelected = !bySalarySelected;
                    byQualificationSelected = false;
                }

                if (e.target.className.indexOf('qualification') > -1) {
                    byQualificationSelected = !byQualificationSelected;
                    bySalarySelected = false;
                }
            });

            handleStatusIndicatorsStatus();
            triggerFilterRequest();
        }

        const handleStatusIndicatorsStatus = () => {

            if (byCitySelected || bySalarySelected || byQualificationSelected) {
                statusIndicatorsContainer.style.display = 'flex';
                buttonAndStatusContainer.style.marginBottom = '5px';
            } else {
                statusIndicatorsContainer.style.display = 'none';
                buttonAndStatusContainer.style.marginBottom = '20px';
            }

            if (byCitySelected) enabledCity.style.opacity = '1'; else enabledCity.style.opacity = '0';
            if (bySalarySelected) enabledSalary.style.opacity = '1'; else enabledSalary.style.opacity = '0';
            if (byQualificationSelected) enabledQualification.style.opacity = '1'; else enabledQualification.style.opacity = '0';
            
        }

        if (previousStates && previousStates.length > 0) {
            if (previousStates[previousStates.length - 1].hasOwnProperty('userId')) {
                let lastFilteredState = previousStates[previousStates.length - 2];
                byCitySelected = lastFilteredState.city;
                bySalarySelected = lastFilteredState.salary;
                byQualificationSelected = lastFilteredState.qualification;
                handleStatusIndicatorsStatus();
            } else {
                let lastFilteredState = previousStates[previousStates.length - 1];
                byCitySelected = lastFilteredState.city;
                bySalarySelected = lastFilteredState.salary;
                byQualificationSelected = lastFilteredState.qualification;
                previousStates = previousStates.slice(0, previousStates.length - 1);
                handleStatusIndicatorsStatus();
            }
        }
        
        const handleQualificationColor = (qualification, element) => {
            if (parseInt(qualification) >= 8) {
                element.classList.remove('yellow');
                element.classList.remove('red');
                element.classList.add('green');
            } else if (parseInt(qualification) >= 5 && parseInt(qualification) < 8) {
                element.classList.remove('green');
                element.classList.remove('red');
                element.classList.add('yellow');
            } else {
                element.classList.remove('green');
                element.classList.remove('yellow');
                element.classList.add('red');
                
            }
        }

        if (firstLoading) {
            const currentItems = document.querySelectorAll('div.dv-lvl-2.recruiter-result-item');
            for (const candidate of currentItems) {
                const qualificationBackgroundNode = candidate.querySelectorAll('div.dv-lvl-3.recruiter-result-item-qualification')[0];
                const qualification = candidate.querySelectorAll('p.p-qualification')[0].innerText;
                handleQualificationColor(qualification, qualificationBackgroundNode);
            }
        }
        

        const triggerFilterRequest = () => {

            let xmlHttpRequest;

            if (window.XMLHttpRequest) {
                xmlHttpRequest = new XMLHttpRequest();
            } else if (window.ActiveXObject) {
                xmlHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
            }

            let filters;
            xmlHttpRequest.onreadystatechange = () => {
                filters = {
                    'city' : byCitySelected,
                    'salary': bySalarySelected,
                    'qualification': byQualificationSelected
                };
            };

            xmlHttpRequest.open('POST', '/file-manager/render', true);

            if (xmlHttpRequest.readyState > 0) {
                xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
            }

            xmlHttpRequest.send(JSON.stringify(filters));

            xmlHttpRequest.onload = () => {
                if (xmlHttpRequest.readyState === 4 && xmlHttpRequest.status === 201) {
                    const response = JSON.parse(xmlHttpRequest.responseText);

                    let container;
                    let lastCity;
                    let infoModelItemNode = document.querySelectorAll('div.dv-lvl-2.recruiter-result-item')[0];
                    let modeAndQuantityIndicator = document.querySelectorAll('div.dv-lvl-1.recruiter-result-banner p')[0];
                    let quantity = document.querySelectorAll('div.dv-lvl-2.recruiter-result-item').length;

                    switch (response.mode) {
                        case 'city':
                            container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                            container.innerHTML = '';
                            lastCity = 'none';
                            modeAndQuantityIndicator.innerText = 'Showing results: ' + quantity + '. Ordered by city';
                            for (const candidate of response.object) {
                                if (candidate.city !== lastCity) {
                                    let newInfoItem = document.createElement("div")
                                    newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + candidate.id;
                                    newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                    container.innerHTML += "<h2 class=\"he-lvl-2 recruiter-city-item-header\">" + candidate.city + "</h2>";
                                    let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                    let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                    let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                    let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                    let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                    let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                    let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                    
                                    let showMapIndex = 0;
                                    showInMapButtons.forEach(
                                        (currentShowMapNode, index) => {
                                            if (candidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                                showMapIndex = index;
                                            }
                                        });
                                    let showMapNode = showInMapButtons[showMapIndex];

                                    nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + candidate.name;
                                    surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + candidate.surname;
                                    emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + candidate.mail;
                                    phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + candidate.phone;
                                    ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + candidate.age;
                                    salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + candidate.salary;
                                    qualificationNode.innerText = candidate.qualification;

                                    handleQualificationColor(candidate.qualification, qualificationNode.parentElement);
                                    container.appendChild(newInfoItem);
                                    container.appendChild(showMapNode)
                                    lastCity = candidate.city;
                                } else {
                                    let newInfoItem = document.createElement("div")
                                    newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + candidate.id;
                                    newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                    let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                    let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                    let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                    let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                    let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                    let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                    let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                    
                                    let showMapIndex = 0;
                                    showInMapButtons.forEach(
                                        (currentShowMapNode, index) => {
                                            if (candidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                                showMapIndex = index;
                                            }
                                        });
                                    let showMapNode = showInMapButtons[showMapIndex];
                                    
                                    nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + candidate.name;
                                    surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + candidate.surname;
                                    emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + candidate.mail;
                                    phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + candidate.phone;
                                    ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + candidate.age;
                                    salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + candidate.salary;
                                    qualificationNode.innerText = candidate.qualification;

                                    handleQualificationColor(candidate.qualification, qualificationNode.parentElement);
                                    container.appendChild(newInfoItem);
                                    container.appendChild(showMapNode)
                                    lastCity = candidate.city;
                                }
                            }
                            break;
                        case 'city/salary':
                            container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                            container.innerHTML = '';
                            lastCity = 'none';
                            modeAndQuantityIndicator.innerText = 'Showing results: ' + quantity + '. Ordered by city and salary';
                            for (const cityCandidates of response.object) {
                                let currentCity = Object.keys(cityCandidates).toString();
                                container.innerHTML += "<h2 class=\"he-lvl-2 recruiter-city-item-header\">" + currentCity + "</h2>";
                                for (const cityCandidate of cityCandidates[currentCity]) {
                                    let newInfoItem = document.createElement("div")
                                    newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + cityCandidate.id;
                                    newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                    let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                    let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                    let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                    let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                    let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                    let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                    let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                    
                                    let showMapIndex = 0;
                                    showInMapButtons.forEach(
                                        (currentShowMapNode, index) => {
                                            if (cityCandidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                                showMapIndex = index;
                                            }
                                        });
                                    let showMapNode = showInMapButtons[showMapIndex];
                                    
                                    nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + cityCandidate.name;
                                    surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + cityCandidate.surname;
                                    emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + cityCandidate.mail;
                                    phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + cityCandidate.phone;
                                    ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + cityCandidate.age;
                                    salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + cityCandidate.salary;
                                    qualificationNode.innerText = cityCandidate.qualification;

                                    handleQualificationColor(cityCandidate.qualification, qualificationNode.parentElement);
                                    container.appendChild(newInfoItem);
                                    container.appendChild(showMapNode);
                                }
                            }
                            break;
                        case 'city/qualification':
                            container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                            container.innerHTML = '';
                            lastCity = 'none';
                            modeAndQuantityIndicator.innerText = 'Showing results: ' + quantity + '. Ordered by city and qualification';
                            for (const cityCandidates of response.object) {
                                let currentCity = Object.keys(cityCandidates).toString();
                                container.innerHTML += "<h2 class=\"he-lvl-2 recruiter-city-item-header\">" + currentCity + "</h2>";
                                for (const cityCandidate of cityCandidates[currentCity]) {
                                    let newInfoItem = document.createElement("div")
                                    newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + cityCandidate.id;
                                    newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                    let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                    let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                    let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                    let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                    let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                    let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                    let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                    
                                    let showMapIndex = 0;
                                    showInMapButtons.forEach(
                                        (currentShowMapNode, index) => {
                                            if (cityCandidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                                showMapIndex = index;
                                            }
                                        });
                                    let showMapNode = showInMapButtons[showMapIndex];

                                    nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + cityCandidate.name;
                                    surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + cityCandidate.surname;
                                    emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + cityCandidate.mail;
                                    phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + cityCandidate.phone;
                                    ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + cityCandidate.age;
                                    salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + cityCandidate.salary;
                                    qualificationNode.innerText = cityCandidate.qualification;

                                    handleQualificationColor(cityCandidate.qualification, qualificationNode.parentElement);
                                    container.appendChild(newInfoItem);
                                    container.appendChild(showMapNode);
                                }
                            }
                            break;
                        case 'salary':
                            container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                            container.innerHTML = '';
                            lastCity = 'none';
                            modeAndQuantityIndicator.innerText = 'Showing results: ' + quantity + '. Ordered by salary';
                            for (const candidate of response.object) {
                                let newInfoItem = document.createElement("div")
                                newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + candidate.id;
                                newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                
                                let showMapIndex = 0;
                                showInMapButtons.forEach(
                                    (currentShowMapNode, index) => {
                                        if (candidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                            showMapIndex = index;
                                        }
                                    });
                                let showMapNode = showInMapButtons[showMapIndex];

                                nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + candidate.name;
                                surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + candidate.surname;
                                emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + candidate.mail;
                                phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + candidate.phone;
                                ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + candidate.age;
                                salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + candidate.salary;
                                qualificationNode.innerText = candidate.qualification;

                                handleQualificationColor(candidate.qualification, qualificationNode.parentElement);
                                container.appendChild(newInfoItem);
                                container.appendChild(showMapNode);
                            }
                            break;
                        case 'qualification':
                            container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                            container.innerHTML = '';
                            lastCity = 'none';
                            modeAndQuantityIndicator.innerText = 'Showing results: ' + quantity + '. Ordered by qualification';
                            for (const candidate of response.object) {
                                let newInfoItem = document.createElement("div")
                                newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + candidate.id;
                                newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                
                                let showMapIndex = 0;
                                showInMapButtons.forEach(
                                    (currentShowMapNode, index) => {
                                        if (candidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                            showMapIndex = index;
                                        }
                                    });
                                let showMapNode = showInMapButtons[showMapIndex];

                                nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + candidate.name;
                                surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + candidate.surname;
                                emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + candidate.mail;
                                phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + candidate.phone;
                                ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + candidate.age;
                                salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + candidate.salary;
                                qualificationNode.innerText = candidate.qualification;

                                handleQualificationColor(candidate.qualification, qualificationNode.parentElement);
                                container.appendChild(newInfoItem);
                                container.appendChild(showMapNode);
                            }
                            break;
                        case 'initial':
                            container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                            container.innerHTML = '';
                            lastCity = 'none';
                            modeAndQuantityIndicator.innerText = 'Showing results: ' + quantity + '. Unordered';
                            for (const candidate of response.object) {
                                let newInfoItem = document.createElement("div")
                                newInfoItem.className = infoModelItemNode.className + ' city-filtered-' + candidate.id;
                                newInfoItem.innerHTML = infoModelItemNode.innerHTML;
                                let nameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-name')[0];
                                let surnameNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-surname')[0];
                                let emailNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-mail')[0];
                                let phoneNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-phone')[0];
                                let ageNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-age')[0];
                                let salaryNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-salary')[0];
                                let qualificationNode = newInfoItem.querySelectorAll('div.' + newInfoItem.className.replace(/\s/g, ".") + ' p.p-qualification')[0];
                                
                                let showMapIndex = 0;
                                showInMapButtons.forEach(
                                    (currentShowMapNode, index) => {
                                        if (candidate.id === parseInt(currentShowMapNode.className.split('r-')[1])) {
                                            showMapIndex = index;
                                        }
                                    });
                                let showMapNode = showInMapButtons[showMapIndex];

                                nameNode.innerText = nameNode.innerText.substring(0, nameNode.innerText.indexOf(' ')) + ' ' + candidate.name;
                                surnameNode.innerText = surnameNode.innerText.substring(0, surnameNode.innerText.indexOf(' ')) + ' ' + candidate.surname;
                                emailNode.innerText = emailNode.innerText.substring(0, emailNode.innerText.indexOf(' ')) + ' ' + candidate.mail;
                                phoneNode.innerText = phoneNode.innerText.substring(0, phoneNode.innerText.indexOf(' ')) + ' ' + candidate.phone;
                                ageNode.innerText = ageNode.innerText.substring(0, ageNode.innerText.indexOf(' ')) + ' ' + candidate.age;
                                salaryNode.innerText = salaryNode.innerText.substring(0, salaryNode.innerText.indexOf(' ')) + ' ' + candidate.salary;
                                qualificationNode.innerText = candidate.qualification;

                                handleQualificationColor(candidate.qualification, qualificationNode.parentElement);
                                container.appendChild(newInfoItem);
                                container.appendChild(showMapNode);
                            }
                            break;
                        default:
                            console.log('No filters selected');  
                            break;
                    }
                    showInMapButtons = document.querySelectorAll('div.dv-lvl-2.show-in-map');
                    setOnClickEvents();
                }
            }

        };
 
        let userId;

        const setOnClickEvents = () => {

            showInMapButtons.forEach(showInMapButton => {
                showInMapButton.onclick = (e) => {
                    let clickedButtonClassName = e.path.find(element => element.className.startsWith('dv-lvl-2 show-in-map')).className;
                    userId = parseInt(clickedButtonClassName.split('r-')[1]);
                    console.log(pageStateOnResults);
                    previousStates.push({
                        city: byCitySelected,
                        salary: bySalarySelected,
                        qualification: byQualificationSelected
                    })
                    localStorage.setItem('pageStatus', JSON.stringify({
                        previousStates: previousStates,
                        pageStateOnResults: pageStateOnResults
                    }));
                    window.location = '/file-manager/map/' + userId;

                    /* container = document.querySelectorAll('div.dv-lvl-1.recruiter-result-items-container')[0];
                    container.innerHTML = '';
                    let mapContainer = document.createElement('div');
                    mapContainer.classList.add('dv-lvl-2');
                    mapContainer.classList.add('map-container');

                    container.appendChild(mapContainer);
                    let polyfillScript = document.createElement('script');
                    polyfillScript.src = "https://polyfill.io/v3/polyfill.min.js?features=default";
                    let googleScript = document.createElement('script');
                    googleScript.src = "https://maps.googleapis.com/maps/api/js?key=YOUR_APY_KEY_MKNA&callback=initMap&libraries=&v=weekly";
                    googleScript.defer = true;

                    document.head.appendChild(polyfillScript);
                    document.head.appendChild(googleScript); */

                };
            });
        }

        setOnClickEvents();

        const getEnabledFilters = () => {
            return {
                city: byCitySelected,
                salary: bySalarySelected,
                qualification: byQualificationSelected
            };
        }

        window.onpopstate = (e) => {

            console.log('onpopstate');

            console.log(history !== null && history !== undefined);

            console.log('__PREVIOUS STATE');
            let previousState = previousStates.pop();
            console.log(previousState);

            if (previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) { 
                byCitySelected = previousState.city ? true : false;
                bySalarySelected = previousState.salary ? true : false;
                byQualificationSelected = previousState.qualification ? true : false;

                handleStatusIndicatorsStatus();    
                triggerFilterRequest();
            } else {
                localStorage.setItem('pageStatus', JSON.stringify({
                    previousStates: previousStates,
                    pageStateOnResults: pageStateOnResults,
                }));
                console.log('ke dise loco¡)');
                console.log(previousStates);
                {{!-- window.location = 'file-manager/map/' + previousState.userId; --}}
            }

            historyFiltered = true;

        }
        
        window.onbeforeunload = (e) => {

            let payload = 'YOURKEYHERE' + addAleatoryHash();
            document.cookie = '_p=' + payload + ';';

            console.log('on before unload');
            console.log(historyFiltered);
            if (!historyFiltered) {
            console.log('__PREVIOUS STATE');
            let previousState = previousStates.pop();
            console.log(previousState);

            if (previousState && previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) { 
                byCitySelected = previousState.city ? true : false;
                bySalarySelected = previousState.salary ? true : false;
                byQualificationSelected = previousState.qualification ? true : false;

                handleStatusIndicatorsStatus();    
                triggerFilterRequest();
            } else {
                localStorage.setItem('pageStatus', JSON.stringify({
                    previousStates: previousStates,
                    pageStateOnResults: pageStateOnResults,
                }));
                console.log('ke dise loco¡)');
                console.log(previousStates);
                {{!-- window.location = 'file-manager/map/' + previousState.userId; --}}
            }

            }
        };

        const addAleatoryHash = () => {
            let hash = '';

            const options = {
                numbers : {
                    min: 48,
                    max: 58
                },
                upper: {
                    min: 65,
                    max: 91
                },
                lower: {
                    min: 97,
                    max: 123
                }
            };


            for (let i = 0; i < 10; i++) {
                const chars = ['numbers', 'upper', 'lower'];
                let index = Math.floor(Math.random() * 3);
                let max = options[chars[index]].max; 
                let min = options[chars[index]].min;
                let asciiCode = Math.floor(Math.random() * (max - min) + min);
                let nextChar = String.fromCharCode(asciiCode);
                hash += nextChar;
            }
            return hash;
        }
        




    </script>
</body>
</html>