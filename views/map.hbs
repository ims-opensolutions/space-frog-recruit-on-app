<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://kit.fontawesome.com/465dd91009.js" crossorigin="anonymous"></script>
    <link href="https://fonts.googleapis.com/css2?family=Barlow+Condensed:wght@500&family=Cormorant+Garamond:wght@500&display=swap" rel="stylesheet">
    <title>RecruitOn - Map</title>
    <style>

        body,
        html {
            padding: 0;
            margin: 0;
            background: #e6e6e6;
            font-family: 'Barlow Condensed', sans-serif;
        }

        div.dv-lvl-0.recruit-on-header {
            max-width: 1920px;
            width: 100%;
            height: 100px;
            background: #252fc2;
            margin: 0 auto;
            display: flex;
            align-items: center;
            box-shadow: 0px 0px 10px 0px #000;
        }

        div.dv-lvl-0.recruiter-on-body {
            padding: .1px;
            box-shadow: 0px 0px 5px -1px #000;
            max-width: 1920px;
            width: 100%;
            margin: 0 auto;
            padding-bottom: 40px;
        }

        div.dv-lvl-1.recruit-on-logo {
            margin-left: 30px;
            color: #e6e6e6;
        }

        img.img-lvl-2.recruit-on-img {
            height: 100px;
        }

        div.dv-lvl-1.page-title {
            margin: 40px 5%;
            width: 27%;
            background: #252fc2;
            color: #e6e6e6;
            box-shadow: 0px 2px 10px -6px #000;
        }

        h1.he-lvl-2.page-title-header {
            padding: 20px;
        }

        div.dv-lvl-2.map-container {
            width: 90%;
            margin: 40px auto;
            background: #dadcff;
            box-shadow: 0px 2px 10px -6px #000;
            display: flex;
            height: 600px;
            display: flex;
            justify-content: center;
            align-items: center;
        }

        i.fas.fa-spinner {
            font-size: 3.5em;
            color: #252fc2;
            position: relative;
            animation: loading 1s linear infinite;
        }

        @keyframes loading {
            from {
                transform: rotate(0deg)
            }
            to {
                transform: rotate(360deg)
            }
        }

        p.error-message {
            color: #252fc2;
            font-size: 1.7em;
            display: 'none';
        }

        div.dv-lvl-1.button-back {
            max-width: 1920px;
            width: 90%;
            margin: 0 auto;
        }

        button.go-back {
            width: 120px;
            display: block;
            padding: .7em;
            background: #b43a3a;
            color: #e6e6e6;
            border: none;
            box-shadow: 0px 0px 3px 2px #ba6868;
            font-family: 'Barlow Condensed', sans-serif;
            font-size: 19px;
            margin: 0 auto;
            cursor: pointer;
        }



    </style>
</head>
<body>

    <div class="main-container">
        <div class="dv-lvl-0 recruit-on-header">
            <div class="dv-lvl-1 recruit-on-logo">
                <img class="img-lvl-2 recruit-on-img" src="../../RecruitOn-logo.jpg">
            </div>
        </div>

        <div class="dv-lvl-0 recruiter-on-body">
            <div class="dv-lvl-1 page-title">
                <h1 class="he-lvl-2 page-title-header">MAPS</h1>
            </div>

            <div class="dv-lvl-1 recruiter-result-items-container">

                <div class="dv-lvl-2 map-container">
                        <i class="fas fa-spinner"></i>
                </div>
            </div>

            <div class="dv-lvl-1 button-back">
                <button class="go-back">Go Back</button>
            </div>

        </div>
            
    </div>

    <script>

        // Adds the script for google map api to work 
        const addGoogleMapsApiScript = () => {
            let polyfillScript = document.createElement('script');
            polyfillScript.src = "https://polyfill.io/v3/polyfill.min.js?features=default";
            let googleScript = document.createElement('script');
            googleScript.src = "https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&callback=initMap&libraries=&v=weekly"; // Insert api key here
            googleScript.defer = true;

            document.head.appendChild(polyfillScript);
            document.head.appendChild(googleScript);
        }

        // Sets the spinner while waiting for map/error
        const setWaitingSpinner = () => {
            let spinner = document.createElement('i');
            spinner.classList.add('fas');
            spinner.classList.add('fa-spinner');
            mapsContainer.appendChild(spinner);
        }

        // Checks if an error has been generated by google maps api and shows an error message
        const setErrorMessageOnLoad = () => {
            window.onload = () => {
                if (mapsContainer.childNodes.length > 0) {
                    mapsContainer.childNodes.forEach(c => {
                        console.log(c);
                        if (c.querySelectorAll('div.gm-err-container').length >= 1) {
                            mapsContainer.removeChild(c);
                            mapsContainer.removeChild(document.querySelector('i'));
                            let errorMessage = document.createElement('p');
                            errorMessage.classList.add('error-message');
                            errorMessage.innerText = 'An error has occurred while retrieving the information for the maps. Please, contact your administrator';
                            mapsContainer.appendChild(errorMessage);
                            errorMessage.style.display = 'block';
                        }
                    });
                }
            }
        }

        // Sets the correct state to maintain correct history status
        const setStateOnBackButtonClick = () => {
            let backButton = document.querySelector('div.dv-lvl-1.button-back');
            backButton.onclick = () => {          
                setSecurityCookie();
                setSessionStorageCookie();       
                totalStates = totalStates.length > 0 ? totalStates : [];
                //const lastSavedState = history && history.hasOwnProperty('lastSavedState') ? history.lastSavedState + 1 : previousStates.length;

/*
                if (previousStates.length > 0) {
                    previousStates.push({
                        userId: userId
                    });
                }
                */

                sessionStorage.setItem('pageStatus', JSON.stringify({
                    totalStates: totalStates,
                    lastSavedPage: { page: page + 1, totalStates: 0 }
                    //initialStates: initialStates
                    //adjustHistoryLength: true,
                    //lastSavedState: lastSavedState
                }));

                historyFiltered = true;

                window.location = 'http://localhost:3000/file-manager/generate';

            }
        }

        // Sets the cookie to authorize request
        const setSecurityCookie = () => {
                let payload = 'encodedhere' + addAleatoryHash();
                var currentTime = new Date();
                let newDate = currentTime.setSeconds(currentTime.getSeconds() + 2);
                let newDateObject = new Date(newDate);
                document.cookie = '_p=' + payload + '; path=/file-manager; samesite=strict; expires=' + newDateObject.toGMTString();
            
        }
        // Sets the cookie to handle session storage
        const setSessionStorageCookie = () => {
                var currentTime = new Date();
                let newDate = currentTime.setSeconds(currentTime.getSeconds() + 2);
                let newDateObject = new Date(newDate);
                document.cookie = '_s=true; path=/file-manager; samesite=strict; expires=' + newDateObject.toGMTString();
            
        }

        // Ads 10 length aleatory hash to base64 encoded cookie
        const addAleatoryHash = () => {
            let hash = '';

            const options = {
                numbers : {
                    min: 48,
                    max: 58
                },
                upper: {
                    min: 65,
                    max: 91
                },
                lower: {
                    min: 97,
                    max: 123
                }
            };


            for (let i = 0; i < 10; i++) {
                const chars = ['numbers', 'upper', 'lower'];
                let index = Math.floor(Math.random() * 3);
                let max = options[chars[index]].max; 
                let min = options[chars[index]].min;
                let asciiCode = Math.floor(Math.random() * (max - min) + min);
                let nextChar = String.fromCharCode(asciiCode);
                hash += nextChar;
            }
            return hash;
        }

        // Executes init process
        const init = () => {
            addGoogleMapsApiScript();
            setErrorMessageOnLoad();
            setStateOnBackButtonClick();
        }

        // Global variables
        let enableOnpopstate = false;
        let userId = parseInt(window.location.pathname.match(/[0-9]/g).toString().replaceAll(',', ''));
        let historyFiltered = false;
        let mapsContainer = document.querySelectorAll('div.dv-lvl-2.map-container')[0];

        let history = sessionStorage.getItem('pageStatus');
        //localStorage.removeItem('pageStatus');
        let totalStates;
        let intialStates;
        let index;
        let page; 
        let totalStatesOnPreviousPage;

        // History management
        if (history !== null && history !== undefined) {
            history = JSON.parse(history);
            console.log(history);
            totalStates = history.totalStates;
            page = history.lastSavedPage.page;
            totalStatesOnPreviousPage = history.lastSavedPage.totalStates;
            //initialStates = history.initialStates;
            index = 1;

            console.log('Previous states');
            console.log(totalStates); // Check amount of records stored

            /*

            for (const previousState of previousStates) {


                if (previousState.hasOwnProperty('city') || previousState.hasOwnProperty('salary') || previousState.hasOwnProperty('qualification')) {
                    console.log('Populating history with filters');
                    window.history.replaceState({ page: index }, 'results-interaction-' + index, '/file-manager/generate');
                    index++;
                } else {
                    console.log('Populating history with user id for map');
                    window.history.replaceState({ page: index }, 'maps-interaction-' + index, '/file-manager/map/' + previousState.userId);
                    index++;
                }
                
            }

            window.history.replaceState(null, null, '/file-manager/map/' + userId);

            */
        }

        // Builds the map
        try {

            let map;

            function initMap() {
                
                map = new google.maps.Map(document.querySelectorAll("div.map-container")[0], {
                center: {
                    lat: 48.113397,
                    lng: 15.670853
                },
                zoom: 4
                });
                
                mapsContainer.childNodes[0].style.display = 'none'; 

                // const setWaitingSpinner = (mapsContainer) => {}
                setWaitingSpinner();
                
                const geocoder = new google.maps.Geocoder();

                let xmlHttpRequest;

                if (window.XMLHttpRequest) {
                    xmlHttpRequest = new XMLHttpRequest();
                } else if (window.ActiveXObject) {
                    xmlHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
                }

                let filters;
                xmlHttpRequest.onreadystatechange = () => {
                    filters = {
                        'city' : true,
                    };
                };

                xmlHttpRequest.open('POST', '/file-manager/render', true);

                if (xmlHttpRequest.readyState > 0) {
                    xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
                }

                xmlHttpRequest.send(JSON.stringify(filters));

                xmlHttpRequest.onload = () => {

                    if (xmlHttpRequest.readyState === 4 && xmlHttpRequest.status === 201) {
                        const response = JSON.parse(xmlHttpRequest.responseText);

                        let user = response.object.find(currentUser => userId === currentUser.id);

                        geocoder.geocode({ address: user.city }, (results, status) => {
                            if (status === "OK") {
                                new google.maps.Marker({
                                    map: map,
                                    position: results[0].geometry.location
                                });
                            } else {
                            alert("Geocode was not successful for the following reason: " + status);
                            }
                        });
                    }
                }

            }

        } catch (err) {
            console.log('Error thrown on maps loading: ' + err);
        }

        // Executes initiation
        init();

        window.onpopstate = () => {
            console.log('Executing onpopstate');

            console.log(enableOnpopstate);
            console.log(window.history.state.page);


            if (enableOnpopstate) {
                const windowState = window.history.state.page;

                if (windowState < defaultStateId) {
                    console.log('Back navigation');
                }

                if (windowState > defaultStateId) {
                    console.log('Forward navigation');
                }

            } else {
                console.log('Skipping onpopstate');
            }



        } 

        // Onbeforeunload to be triggered when unloading every page
        window.onbeforeunload = (e) => {
            console.log('Executing onbeforeunload');
            setSecurityCookie();
            setSessionStorageCookie();

            //const lastSavedState = history && history.hasOwnProperty('lastSavedState') ? history.lastSavedState : previousStates.length - 1;
            
            if (!historyFiltered) {
                
                totalStates = totalStates.length > 0 ? totalStates : [];

                sessionStorage.setItem('pageStatus', JSON.stringify({

                    totalStates: totalStates,
                    lastSavedPage: { page: page, totalStates: totalStatesOnPreviousPage },
                    windowPrecedence: true
                    //initialStates: initialStates
                    //adjustHistoryLength: true,
                    //lastSavedState: lastSavedState
                }));
                window.location = 'http://localhost:3000/file-manager/generate';

            }
        };

    </script>



    
</body>
</html>     