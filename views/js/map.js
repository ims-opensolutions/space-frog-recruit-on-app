// Adds the script for google map api to work 
const addGoogleMapsApiScript = () => {
    let polyfillScript = document.createElement('script');
    polyfillScript.src = "https://polyfill.io/v3/polyfill.min.js?features=default";
    let googleScript = document.createElement('script');
    googleScript.src = "https://maps.googleapis.com/maps/api/js?key=NONONO-YPIIz34&callback=initMap&libraries=&v=weekly"; // Insert api key here
    googleScript.defer = true;

    document.head.appendChild(polyfillScript);
    document.head.appendChild(googleScript);
}

// Sets the spinner while waiting for map/error
const setWaitingSpinner = () => {
    let spinner = document.createElement('i');
    spinner.classList.add('fas');
    spinner.classList.add('fa-spinner');
    mapsContainer.appendChild(spinner);
}

// Checks if an error has been generated by google maps api and shows an error message
const setErrorMessageOnLoad = () => {
    window.onload = () => {
        if (mapsContainer.childNodes.length > 0) {
            mapsContainer.childNodes.forEach(c => {
                if (c.querySelectorAll('div.gm-err-container').length >= 1) {
                    mapsContainer.removeChild(c);  
                    mapsContainer.removeChild(document.querySelector('i'));
                    let errorMessage = document.createElement('p');
                    errorMessage.classList.add('error-message');
                    errorMessage.innerText = 'An error has occurred while retrieving the information for the maps. Please, contact your administrator';
                    mapsContainer.appendChild(errorMessage);
                    errorMessage.style.display = 'block';
                }
            });
        }
    }
}

// Sets the correct state to maintain correct history status
const setStateOnBackButtonClick = () => {
    let backButton = document.querySelector('div.dv-lvl-1.button-back');
    backButton.onclick = () => {          
        setSecurityCookie();
        setSessionStorageCookie();       
        totalStates = totalStates.length > 0 ? totalStates : [];

        sessionStorage.setItem('pageStatus', JSON.stringify({
            totalStates: totalStates,
            lastSavedPage: { page: page + 1, totalStates: 0 }
        }));

        historyFiltered = true;

        window.location = 'https://localhost:3000/file-manager/generate';
    }
}

// Sets the cookie to authorize request
const setSecurityCookie = () => {
        let payload = 'encodehre==' + addAleatoryHash();
        var currentTime = new Date();
        let newDate = currentTime.setSeconds(currentTime.getSeconds() + 2);
        let newDateObject = new Date(newDate);
        document.cookie = '_p=' + payload + '; path=/file-manager; samesite=strict; expires=' + newDateObject.toGMTString();
    
}
// Sets the cookie to handle session storage
const setSessionStorageCookie = () => {
        var currentTime = new Date();
        let newDate = currentTime.setSeconds(currentTime.getSeconds() + 2);
        let newDateObject = new Date(newDate);
        document.cookie = '_s=true; path=/file-manager; samesite=strict; expires=' + newDateObject.toGMTString();
    
}

// Ads 10 length aleatory hash to base64 encoded cookie
const addAleatoryHash = () => {
    let hash = '';

    const options = {
        numbers : {
            min: 48,
            max: 58
        },
        upper: {
            min: 65,
            max: 91
        },
        lower: {
            min: 97,
            max: 123
        }
    };


    for (let i = 0; i < 10; i++) {
        const chars = ['numbers', 'upper', 'lower'];
        let index = Math.floor(Math.random() * 3);
        let max = options[chars[index]].max; 
        let min = options[chars[index]].min;
        let asciiCode = Math.floor(Math.random() * (max - min) + min);
        let nextChar = String.fromCharCode(asciiCode);
        hash += nextChar;
    }
    return hash;
}

// Executes init process
const init = () => {
    addGoogleMapsApiScript();
    setStateOnBackButtonClick();
}

setErrorMessageOnLoad();

// Global variables
let enableOnpopstate = false;
let userId = parseInt(window.location.pathname.match(/[0-9]/g).toString().replaceAll(',', ''));
let historyFiltered = false;
let mapsContainer = document.querySelectorAll('div.dv-lvl-2.map-container')[0];

let history = sessionStorage.getItem('pageStatus');
let totalStates;
let intialStates;
let index;
let page; 
let totalStatesOnPreviousPage;

// History management
if (history !== null && history !== undefined) {
    history = JSON.parse(history);
    totalStates = history.totalStates;
    page = history.lastSavedPage.page;
    totalStatesOnPreviousPage = history.lastSavedPage.totalStates;
}

// Builds the map
try {

    let map;

    function initMap() {
        
        map = new google.maps.Map(document.querySelectorAll("div.map-container")[0], {
        center: {
            lat: 48.113397,
            lng: 15.670853
        },
        zoom: 4
        });
        
        mapsContainer.childNodes[0].style.display = 'none'; 

        setWaitingSpinner();
        
        const geocoder = new google.maps.Geocoder();

        let xmlHttpRequest;

        if (window.XMLHttpRequest) {
            xmlHttpRequest = new XMLHttpRequest();
        } else if (window.ActiveXObject) {
            xmlHttpRequest = new ActiveXObject("Microsoft.XMLHTTP");
        }

        let filters;
        xmlHttpRequest.onreadystatechange = () => {
            filters = {
                'city' : true,
            };
        };

        xmlHttpRequest.open('POST', '/file-manager/render', true);

        if (xmlHttpRequest.readyState > 0) {
            xmlHttpRequest.setRequestHeader('Content-Type', 'application/json');
        }

        xmlHttpRequest.send(JSON.stringify(filters));

        xmlHttpRequest.onload = () => {

            if (xmlHttpRequest.readyState === 4 && xmlHttpRequest.status === 201) {
                const response = JSON.parse(xmlHttpRequest.responseText);

                let user = response.object.find(currentUser => userId === currentUser.id);

                geocoder.geocode({ address: user.city }, (results, status) => {
                    console.log(results);
                    console.log(status);
                    if (status === "OK") {
                        new google.maps.Marker({
                            map: map,
                            position: results[0].geometry.location
                        });
                        mapsContainer.childNodes[0].style.display = 'block'; 
                        document.querySelector('i.fas.fa-spinner').style.display = 'none';
                    } else {
                    alert("Geocode was not successful for the following reason: " + status);
                    }
                });
            }
        }

    }

} catch (err) {
    console.log('Error thrown on maps loading: ' + err);
}

// Executes initiation
init();

// Onbeforeunload to be triggered when unloading every page
window.onbeforeunload = (e) => {
    console.log('Executing onbeforeunload');
    setSecurityCookie();
    setSessionStorageCookie();
    
    if (!historyFiltered) {
        
        totalStates = totalStates.length > 0 ? totalStates : [];

        sessionStorage.setItem('pageStatus', JSON.stringify({
            totalStates: totalStates,
            lastSavedPage: { page: page, totalStates: totalStatesOnPreviousPage },
            windowPrecedence: true
        }));

        window.location = 'https://localhost:3000/file-manager/generate';

    }
};